name: CI/CD to GKE 

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker to Use Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev

      - name: Create and Use Buildx Builder
        run: |
          if ! docker buildx ls | grep -q 'default'; then
            docker buildx create --use
          else
            echo "Using existing builder"
          fi

      - name: Build and Push Image
        run: |
          IMAGE_NAME=my-app
          VERSION=$(git rev-parse --short HEAD)
          docker buildx build --platform linux/amd64 -f webapp/src/Dockerfile \
            -t ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/$IMAGE_NAME:$VERSION \
            webapp/src --push


  sonarqube:
    name: SonarQube
    runs-on: self-hosted
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: "." 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to GKE
    runs-on: self-hosted
    needs: sonarqube
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --region ${{ secrets.REGION }} --project ${{ secrets.PROJECT_ID }}

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy Helm Chart
        run: |
          IMAGE_NAME=my-app
          VERSION=$(git rev-parse --short HEAD)
          helm upgrade --install my-release webapp/helm/python-app \
            --set image.repository=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/$IMAGE_NAME \
            --set image.tag=$VERSION \
            --namespace default

      - name: Deploy Multi Tier Helm Chart
        run: |
          IMAGE_NAME=my-app
          VERSION=$(git rev-parse --short HEAD)
          helm upgrade --install multi-tier webapp/multi-tier-app \
            --set image.repository=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/$IMAGE_NAME \
            --set image.tag=$VERSION \
            --namespace default